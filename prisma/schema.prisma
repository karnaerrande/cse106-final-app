// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}
// companies table
model Company {
  id      Int      @id @default(autoincrement())
  cik_str String?  @default("")
  ticker  String?  @default("")
  cname   String?  @default("")
  features CompanyFeature[]
  favoritedBy   User? @relation("FavoriteCompanies", fields: [favoritedById], references:[id])
  favoritedById String?
}

// companyfeatures table
model CompanyFeature {
  id         Int    @id @default(autoincrement())
  company_id Int
  feature_id Int
  yr         String
  val        String
  company    Company @relation(fields: [company_id], references: [id])
  feature    Feature @relation(fields: [feature_id], references: [id])
}

// features table
model Feature {
  id    Int     @id @default(autoincrement())
  name  String? @default("")
  label String? @default("")
  companies CompanyFeature[]
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    favoriteCompanies Company[] @relation("FavoriteCompanies")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
