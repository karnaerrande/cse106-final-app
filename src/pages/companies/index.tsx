import React, { useEffect, useState } from "react";
import { Button, Typography, TextField } from '@mui/material';
import { type NextPage } from "next";
import Head from "next/head";
import { useSession } from "next-auth/react";
import { DataGrid, GridCellEditStopParams, GridColDef} from '@mui/x-data-grid';
import { api } from "~/utils/api";

interface RowType{
    id: string,
    cik_str: string,
    ticker: string,
    cname: string,
    fav: boolean
}

const Companies: NextPage = () => {
    const { data: sessionData } = useSession();
    const [search, setSearch] = useState('')
    const [rows, setRows] = useState<RowType[]>([]);

    const favs = api.company.getFavorites.useQuery({ uid: sessionData ? sessionData.user.id : '', term: search });
    const comps = api.company.search.useQuery(search);
    const addFavorite = api.company.addFavorite.useMutation({});
    const removeFavorite = api.company.removeFavorite.useMutation({});

    const columns: GridColDef[] = [
        { field: 'id', 
        headerName: 'ID', 
        width: 90,
        renderCell: (cellValues: { row: { id: string } }) => (
            <Button href={'companies/' + String(cellValues.row.id)}>
              {cellValues.row?.id}
            </Button>
          )
        },
        {
            field: 'cik_str',
            headerName: 'CIK',
            width: 150,
            editable: false,
        },
        {
            field: 'ticker',
            headerName: 'Ticker',
            width: 150,
            editable: false,
        },
        {
            field: 'cname',
            headerName: 'Name',
            width: 400,
            editable: false,
        },
        {
            field: 'fav',
            headerName: 'Favorite',
            type: 'boolean',
            width: 200,
            editable: true
        },
    ];

    useEffect(() => {
        const temp: RowType[] = []

        if (comps.data)
            for (let i = 0; i < comps.data.length; i++) {
                temp.push({
                    id: String(comps.data[i]?.id),
                    cik_str: String(comps.data[i]?.cik_str),
                    ticker: String(comps.data[i]?.ticker),
                    cname: String(comps.data[i]?.cname),
                    fav: false
                })
            }
        if (favs.data && favs.data.favoriteCompanies)
            for (let i = 0; i < favs.data.favoriteCompanies.length; i++) {
                for (let j = 0; j < temp.length; j++) {
                    if (temp[j] !== undefined  && favs.data.favoriteCompanies[i]?.id === temp[j]?.id) {
                        temp[j]!.fav = true
                    }
                }

            }
        console.log(temp)
        setRows(temp)
    }, [favs.data, comps.data])


    const handleCellEditStop = (params: GridCellEditStopParams<RowType, string>) => {
        const editedRow: RowType = {
          ...params.row,
          [params.field]: params.value,
        };
      
        if (editedRow?.fav) {
          removeFavorite.mutate({ cid: editedRow.id, uid: sessionData?.user.id ?? '' });
        } else {
          addFavorite.mutate({ cid: editedRow.id, uid: sessionData?.user.id ?? '' });
        }
      };

      const handleRmClick = (id: string) => {
        removeFavorite.mutate({ cid: id, uid: sessionData?.user.id ?? '' });
      }

    const confirmedCompanies = [
        {id:"5226",ticker:"ELYM"},
        {id:"1314",ticker:"FIVN"},
        {id:"4482",ticker:"CBAN"},
        {id:"2568",ticker:"DSGR"},
        {id:"4933",ticker:"SWZ"},
        {id:"4678",ticker:"PYR"},
        {id:"1639",ticker:"VSH"},
        {id:"5265",ticker:"PXLW"},
        {id:"789",ticker:"SCI"},
        {id:"5262",ticker:"FXLV"}
    ]

    return (
        <>
            <Head>
                <title>Financial Statement App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <TextField
                id="outlined-controlled"
                label="Search"
                value={search}
                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                    setSearch(event.target.value);
                }}
            />
            <>
                <DataGrid
                    rows={rows}
                    columns={columns}
                    initialState={{
                        pagination: {
                            paginationModel: {
                                pageSize: 5,
                            },
                        }, sorting: {
                            sortModel: [{ field: 'fav', sort: 'desc' }],
                        },
                    }}
                    pageSizeOptions={[5]}
                    onCellEditStop={handleCellEditStop}
                />
            </>
            <>
                <Typography variant="h4">Favorite Companies</Typography>
                <>
                {favs.data?.favoriteCompanies.map((x)=>
                <>
                <Button key={x.id} href={"/companies/"+String(x.id)}>
                    {x.ticker}
                </Button>
                <Button style={{ backgroundColor: "gray" }} onClick={() => handleRmClick(String(x.id))} variant="contained">
                    -
                </Button>
                </>
                )}
                </>
            </>
            <>
                <Typography variant="h4">Confirmed Companies</Typography>
                {confirmedCompanies.map((x)=>
                <Button key={x.id} href={"/companies/"+x.id}>
                    {x.ticker}
                </Button>
                )}
            </>
        </>
    );
};

export default Companies;
